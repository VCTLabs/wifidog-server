0 info it worked if it ends with ok
1 verbose cli [ '/home/pillar/.nvm/versions/node/v5.5.0/bin/node',
1 verbose cli   '/home/pillar/.nvm/versions/node/v5.5.0/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.3.12
3 info using node@v5.5.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/pillar/BeagleBone/wifidog-server',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/pillar/.npm/webconfig/0.0.1/package.tgz not in flight; packing
9 info lifecycle webconfig@0.0.1~prepublish: webconfig@0.0.1
10 silly lifecycle webconfig@0.0.1~prepublish: no script for prepublish, continuing
11 verbose tar pack [ '/home/pillar/.npm/webconfig/0.0.1/package.tgz',
11 verbose tar pack   '/home/pillar/BeagleBone/wifidog-server' ]
12 verbose tarball /home/pillar/.npm/webconfig/0.0.1/package.tgz
13 verbose folder /home/pillar/BeagleBone/wifidog-server
14 verbose addLocalTarball adding from inside cache /home/pillar/.npm/webconfig/0.0.1/package.tgz
15 silly cache afterAdd webconfig@0.0.1
16 verbose afterAdd /home/pillar/.npm/webconfig/0.0.1/package/package.json not in flight; writing
17 verbose afterAdd /home/pillar/.npm/webconfig/0.0.1/package/package.json written
18 silly publish { name: 'webconfig',
18 silly publish   version: '0.0.1',
18 silly publish   scripts: { start: 'nodejs ./bin/www' },
18 silly publish   dependencies:
18 silly publish    { 'body-parser': '~1.13.2',
18 silly publish      'connman-simplified': '^0.1.3',
18 silly publish      'cookie-parser': '~1.3.5',
18 silly publish      ejs: '~2.3.3',
18 silly publish      express: '~4.13.1',
18 silly publish      morgan: '~1.6.1',
18 silly publish      'serve-favicon': '~2.3.0',
18 silly publish      'socket.io': '^1.4.5',
18 silly publish      winston: '~2.2.0' },
18 silly publish   license: '(ISC OR GPL-3.0)',
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+https://github.com/Pillar1989/wifidog-server.git' },
18 silly publish   readme: '#Webconfig\r\n##Overview\r\n* usb0: setup by udhcpd\r\n* wlan0: setup by ConnMan\r\n* SoftAp0: setup by dnsmasq\r\n\r\n###wlan0\r\nSetup by ConnMan, because of wifi captive portal need dns server, so we disable ConnMan dns serivce.\r\n>cat /lib/systemd/system/connman.service \r\n\r\n\t[Unit]\r\n\tDescription=Connection service\r\n\tDefaultDependencies=false\r\n\tConflicts=shutdown.target\r\n\tRequiresMountsFor=/var/lib/connman\r\n\tAfter=dbus.service network-pre.target systemd-sysusers.service\r\n\tBefore=network.target multi-user.target shutdown.target\r\n\tWants=network.target\r\n\r\n\t[Service]\r\n\tType=dbus\r\n\tBusName=net.connman\r\n\tRestart=on-failure\r\n\tExecStart=/usr/sbin/connmand -n --nodnsproxy\r\n\tStandardOutput=null\r\n\tCapabilityBoundingSet=CAP_KILL CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_SYS_TIME CAP_SYS_MODULE\r\n\tProtectHome=true\r\n\tProtectSystem=full\r\n\r\n\t[Install]\r\n\tWantedBy=multi-user.target\r\n###SoftAp0\r\nIn order to set Wifi to Multrole mode, so add SoftAp0  virtual interface.\r\n>cat /usr/bin/wifidog_pre\r\n\r\n\t#!/bin/bash\r\n\tiw phy phy0 interface add SoftAp0 type managed\r\n\tifconfig SoftAp0 up\r\n\tifconfig SoftAp0 192.168.8.1 netmask 255.255.255.0 up\r\n\techo 1 > /proc/sys/net/ipv4/ip_forward\r\n\tiptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE\r\n\tiptables -A FORWARD -i wlan0 -o SoftAp0 -m state --state RELATED,ESTABLISHED -j ACCEPT\r\n\tiptables -A FORWARD -i SoftAp0 -o wlan0 -j ACCEPT\r\n\r\n\twifidog -f -d 7\r\n\r\nStart this script on boot.\r\n>cat /lib/systemd/system/wifidog-gateway.service\r\n\r\n\t[Unit]\r\n\tDescription=wifidog gateway Service\r\n\tAfter=network.target\r\n\r\n\t[Service]\r\n\tType=simple\r\n\tExecStart=/usr/bin/wifidog_pre\r\n\tKillSignal=SIGINT\r\n\tRestart=on-failure\r\n\tRestartSec=5\r\n\r\n\t[Install]\r\n\tWantedBy=multi-user.target\r\nSoftAp0 dhcpd services provided by dnsmasq. wifi captive portal also need dnsmasq provide dns local analysis.\r\n>cat /etc/dnsmasq.d/SoftAp0\r\n\r\n\tinterface=SoftAp0\r\n\tport=53\r\n\tdhcp-authoritative\r\n\tdomain-needed\r\n\tbogus-priv\r\n\texpand-hosts\r\n\tcache-size=2048\r\n\t#domain=lan\r\n\t#server=/lan/\r\n\t#dhcp-range=lan,192.168.8.50,192.168.8.150,12h\r\n\tdhcp-range=192.168.8.50,192.168.8.150,12h\r\n\tlisten-address=127.0.0.1\r\n\tlisten-address=192.168.8.1\r\n\t#server=/beaglebone.lan/\r\n\t#server=/captive.apple.com/\r\n\t#server=/beaglebone.local/\r\n\tdhcp-option-force=option:router,192.168.8.1\r\n\tdhcp-option-force=option:dns-server,192.168.8.1\r\n\tdhcp-option-force=option:mtu,1500\r\n\t#no-hosts \r\n\t#bind-interfaces\r\n\t#no-resolv\r\n\t#address=/beaglebone.lan/192.168.8.1\r\n\t#address=/beaglebone.local/192.168.8.1\r\n\taddress=/#/172.1.8.1\r\n\t#ptr-record=1.8.168.192.in-addr.arpa,beaglebone.lan\r\nSoftAp0 AP mode seted by hostapd(hostapd v2.5-devel), We update it from https://git.ti.com/wilink8-wlan/build-utilites.git. Configure hostapd example:\r\nhttps://github.com/Pillar1989/wifidog-server/blob/BBGW/conf/hostapd.conf\r\n\r\nActually it config in nodejs code.\r\nhttps://github.com/Pillar1989/wifidog-server/blob/BBGW/config.js\r\n\r\nConnman should allow hostapd play SoftAp0. \r\n>cat /etc/connman/main.conf\r\n\r\n\t[General]\r\n\tPreferredTechnologies=ethernet,wifi\r\n\tSingleConnectedTechnology=false\r\n\tAllowHostnameUpdates=false\r\n\tPersistentTetheringMode=true\r\n\tNetworkInterfaceBlacklist=usb0,SoftAp0\r\n\r\n###Wifi captive portal\r\nWe use wifidog(www.wifidog.org) provide wifi captive portal.\r\n>git clone https://github.com/Pillar1989/wifidog-gateway\r\n>./autogen.sh\r\n>configure --prefix=/usr\r\n>make && make install\r\n\r\nConfig it:\r\n>cp wifidog.* /usr/etc/\r\n\r\n\t...\r\n\tGatewayInterface SoftAp0\r\n\t...\r\n\tGatewayAddress 192.168.8.1\r\n\t...\r\n\tAuthServer { \r\n\tHostname 192.168.8.1\r\n\tSSLAvailable no\r\n\tHTTPPort 520\r\n\tPath /\r\n\t}\r\n\t...\r\n\r\n###Wifidog Protocol\r\n\r\n![](https://github.com/Pillar1989/wifidog-server/blob/BBGW/public/image/wifidog-Protocol.png)\r\n\r\n* The client does his initial request, as if he was already connected, (e.g.: http://www.google.ca)\r\n* The Gateway\'s firewall rules mangle the request to redirect it to a local port on the Gateway. When that\'s the done, the Gateway provides an HTTP Redirect reply that contains the Gateway ID, Gateway FQDN and other informations\r\n* The Client does his request to the Auth Server as specified by the Gateway, see Login Protocol\r\n* The Gateway replies with a (potentially custom) splash (login) page\r\n* The Client provides his identification informations (username and password)\r\n* Upon succesful authentication, the client gets an HTTP Redirect to the Gateway\'s own web server with his authentication proof (a one-time token), http://GatewayIP:GatewayPort/wifidog/auth?token=[auth token]\r\n* The Client then connects to the Gateway and thus gives it his token\r\n* The Gateway requests validation of the token from the Auth Server, see Client Protocol\r\n* The Auth Server confirms the token\r\n* The Gateway then sends a redirect to the Client to obtain the Success Page from the Auth Server, redirects to http://auth_server/portal/\r\n* The Auth Server notifies the Client that his request was successful\r\n\r\n\r\n###wifidog server\r\n>git clone https://github.com/Pillar1989/wifidog-server -B BBGW\r\n\r\n>cd wifidog-server\r\n\r\n>npm install\r\n\r\n>npm start\r\n\r\nEnjoy it.\r\n\r\n## License\r\n\r\nThis project is developed by Baozhu Zuo(<zuobaozhu@gmail>) for seeed studio. \r\n\r\nThe code written in this project is licensed under the [GNU GPL v3 License](http://www.gnu.org/licenses/gpl-3.0.en.html). \r\n\r\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '85f1fe3cbdb1cd66ad55ae5088bc720c4b530fe3',
18 silly publish   description: '* usb0: setup by udhcpd\r * wlan0: setup by ConnMan\r * SoftAp0: setup by dnsmasq',
18 silly publish   bugs: { url: 'https://github.com/Pillar1989/wifidog-server/issues' },
18 silly publish   homepage: 'https://github.com/Pillar1989/wifidog-server#readme',
18 silly publish   _id: 'webconfig@0.0.1',
18 silly publish   _shasum: '7e1f0a6b69431bb8726e311894556a141a7a2324',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name webconfig
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/webconfig
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /home/pillar/.npm/webconfig/0.0.1/package.tgz
26 verbose request uri https://registry.npmjs.org/webconfig
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 1:41:10 PM
29 verbose request using bearer token for auth
30 verbose request id c7610720c760e135
31 http request PUT https://registry.npmjs.org/webconfig
32 http 503 https://registry.npmjs.org/webconfig
33 verbose bad json <?xml version="1.0" encoding="utf-8"?>
33 verbose bad json <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
33 verbose bad json  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
33 verbose bad json <html>
33 verbose bad json   <head>
33 verbose bad json     <title>503 client read error</title>
33 verbose bad json   </head>
33 verbose bad json   <body>
33 verbose bad json     <h1>Error 503 client read error</h1>
33 verbose bad json     <p>client read error</p>
33 verbose bad json     <h3>Guru Mediation:</h3>
33 verbose bad json     <p>Details: cache-hkg6826-HKG 1461649975 3084751538</p>
33 verbose bad json     <hr>
33 verbose bad json     <p>Varnish cache server</p>
33 verbose bad json   </body>
33 verbose bad json </html>
34 error registry error parsing json
35 verbose headers { server: 'Varnish',
35 verbose headers   'retry-after': '0',
35 verbose headers   'content-type': 'text/html; charset=utf-8',
35 verbose headers   'content-length': '445',
35 verbose headers   'accept-ranges': 'bytes',
35 verbose headers   date: 'Tue, 26 Apr 2016 05:52:55 GMT',
35 verbose headers   via: '1.1 varnish',
35 verbose headers   connection: 'close',
35 verbose headers   'x-served-by': 'cache-hkg6826-HKG',
35 verbose headers   'x-cache': 'MISS',
35 verbose headers   'x-cache-hits': '0',
35 verbose headers   'x-timer': 'S1461649302.707681,VS0,VE672533' }
36 info retry will retry, error on last attempt: SyntaxError: Unexpected token <
36 info retry
36 info retry <?xml version="1.0" encoding="utf-8"?>
36 info retry <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
36 info retry  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
36 info retry <html>
36 info retry   <head>
36 info retry     <title>503 client read error</title>
36 info retry   </head>
36 info retry   <body>
36 info retry     <h1>Error 503 client read error</h1>
36 info retry     <p>client read error</p>
36 info retry     <h3>Guru Mediation:</h3>
36 info retry     <p>Details: cache-hkg6826-HKG 1461649975 3084751538</p>
36 info retry     <hr>
36 info retry     <p>Varnish cache server</p>
36 info retry   </body>
36 info retry </html>
37 info attempt registry request try #2 at 1:52:33 PM
38 verbose request using bearer token for auth
39 http request PUT https://registry.npmjs.org/webconfig
40 http 403 https://registry.npmjs.org/webconfig
41 verbose headers { 'content-type': 'application/json',
41 verbose headers   'cache-control': 'max-age=300',
41 verbose headers   'content-length': '103',
41 verbose headers   'accept-ranges': 'bytes',
41 verbose headers   date: 'Tue, 26 Apr 2016 05:53:18 GMT',
41 verbose headers   via: '1.1 varnish',
41 verbose headers   connection: 'keep-alive',
41 verbose headers   'x-served-by': 'cache-fra1227-FRA',
41 verbose headers   'x-cache': 'MISS',
41 verbose headers   'x-cache-hits': '0',
41 verbose headers   'x-timer': 'S1461649987.256510,VS0,VE11538',
41 verbose headers   vary: 'Accept-Encoding' }
42 verbose request invalidating /home/pillar/.npm/registry.npmjs.org/webconfig on PUT
43 error publish Failed PUT 403
44 verbose stack Error: you do not have permission to publish "webconfig". Are you logged in as the correct user? : webconfig
44 verbose stack     at makeError (/home/pillar/.nvm/versions/node/v5.5.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
44 verbose stack     at CachingRegistryClient.<anonymous> (/home/pillar/.nvm/versions/node/v5.5.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
44 verbose stack     at Request._callback (/home/pillar/.nvm/versions/node/v5.5.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
44 verbose stack     at Request.self.callback (/home/pillar/.nvm/versions/node/v5.5.0/lib/node_modules/npm/node_modules/request/request.js:198:22)
44 verbose stack     at emitTwo (events.js:100:13)
44 verbose stack     at Request.emit (events.js:185:7)
44 verbose stack     at Request.<anonymous> (/home/pillar/.nvm/versions/node/v5.5.0/lib/node_modules/npm/node_modules/request/request.js:1082:10)
44 verbose stack     at emitOne (events.js:95:20)
44 verbose stack     at Request.emit (events.js:182:7)
44 verbose stack     at IncomingMessage.<anonymous> (/home/pillar/.nvm/versions/node/v5.5.0/lib/node_modules/npm/node_modules/request/request.js:1009:12)
45 verbose statusCode 403
46 verbose pkgid webconfig
47 verbose cwd /home/pillar/BeagleBone/wifidog-server
48 error Linux 3.16.0-45-generic
49 error argv "/home/pillar/.nvm/versions/node/v5.5.0/bin/node" "/home/pillar/.nvm/versions/node/v5.5.0/bin/npm" "publish"
50 error node v5.5.0
51 error npm  v3.3.12
52 error code E403
53 error you do not have permission to publish "webconfig". Are you logged in as the correct user? : webconfig
54 error If you need help, you may report this error at:
54 error     <https://github.com/npm/npm/issues>
55 verbose exit [ 1, true ]
